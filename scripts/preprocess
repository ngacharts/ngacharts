#!/bin/bash
#Standard image preprocessing script

#set default values
ngadir="/home/nohal/nga" # top level directory of the nga chart images
tmpdir="." # directory for temporary files

# set up functions to report Usage and Usage with Description
PROGNAME=`type $0 | awk '{print $3}'`  # search for executable on path
PROGDIR=`dirname $PROGNAME`            # extract directory of program
PROGNAME=`basename $PROGNAME`          # base name of program

# function to print usage instructions
usage()
	{
	echo >&2 ""
	echo >&2 "Usage: $PROGNAME <chart number>"
	}

# function to report error messages
errMsg()
        {
        echo ""
        echo $1
        echo ""
        usage
        exit 1
        }


if [ $# -eq 0 ]
        then
        # help information
	echo ""
   	usage
   	exit 0
elif [ $# -gt 1 ]
   	then
   	errMsg "--- TOO MANY ARGUMENTS WERE PROVIDED ---"
else
	infile=$ngadir/$1/$1.jpg
	outfile=$ngadir/$1/$1.png
fi

# setup temporary images and auto delete upon exit
tmpI1="$tmpdir/preprocess_I_$$.jpg"
tmpP1="$tmpdir/preprocess_P_$$.png"
tmpP2="$tmpdir/preprocess_PD_$$.png"
trap "rm -f $tmpI1 $tmpP1 $tmpP2; exit 0" 0
trap "rm -f $tmpI1 $tmpP1 $tmpP2; exit 1" 1 2 3 15

# read the input image and filter image into the temp files and test validity.
ionice -c3 convert -quiet -regard-warnings "$infile" +repage "$tmpP1" ||
        errMsg "--- FILE $infile DOES NOT EXIST OR IS NOT AN ORDINARY FILE, NOT READABLE OR HAS ZERO SIZE  ---"

# convert to png
#ionice -c3 convert -quiet -regard-warnings "$tmpI1" "$tmpP1" ||
#	errMsg "--- FILE $infile CAN'T BE CONVERTED TO PNG  ---"

# denoise - VERY expensive operation! Take hours to complete
# $PROGDIR/denoise -f 2 -s "20x20+203+152" -u 1 "$tmpP1" "$tmpP2"

# shrink and convert to palette
ionice -c3 convert -quiet -regard-warnings "$tmpP1" -level 5% -resize 50% -depth 8 -colors 32 -type Palette "png8:$outfile" ||
        errMsg "--- FILE $infile CAN'T BE SHRUNK TO PNG  ---"

